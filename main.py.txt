import os
import threading
import traceback
from flask import Flask, request, jsonify
from supabase import create_client, Client
from ortools.sat.python import cp_model
from datetime import date, timedelta

app = Flask(__name__)

# --- Supabase Initialization ---
url: str = os.environ.get("SUPABASE_URL")
key: str = os.environ.get("SUPABASE_KEY")
supabase: Client = create_client(url, key)
INTERNAL_API_TOKEN: str = os.environ.get("INTERNAL_API_TOKEN")

# --- Health Check Endpoint ---
@app.route("/", methods=["GET"])
def health_check():
    return jsonify({"status": "healthy"}), 200

# --- Solver Logic ---
def solve_schedule(run_id, start_date_str, end_date_str, resources, all_exception_rules):
    try:
        print(f"[{run_id}] Solver thread started. Updating status to SOLVING.")
        supabase.from_("runs").update({"status": "SOLVING"}).eq("id", run_id).execute()

        start_dt = date.fromisoformat(start_date_str)
        end_dt = date.fromisoformat(end_date_str)
        
        all_days = []
        current_dt = start_dt
        exception_map = {e['date']: e for e in all_exception_rules}

        while current_dt <= end_dt:
            date_str = current_dt.isoformat()
            day_config = exception_map.get(date_str)
            
            if day_config:
                all_days.append({
                    'date': date_str,
                    'isRestDay': day_config.get('isRestDayOverride', False),
                    'targetMinutes': day_config.get('targetMinutes', 0)
                })
            else:
                day_of_week = current_dt.weekday()
                is_weekend = day_of_week >= 5
                all_days.append({
                    'date': date_str,
                    'isRestDay': False,
                    'targetMinutes': 480 if is_weekend else 330
                })
            current_dt += timedelta(days=1)
        
        print(f"[{run_id}] Processed {len(all_days)} days. Creating model...")

        model = cp_model.CpModel()
        on_day_vars = {}
        for r in resources:
            for day_index in range(len(all_days)):
                on_day_vars[(r['id'], day_index)] = model.NewBoolVar(f"on_day_{r['id']}_{day_index}")

        for r in resources:
            if r.get('isPrimaryMaterial', False):
                model.AddExactlyOne(on_day_vars[(r['id'], day_index)] for day_index in range(len(all_days)))

        for day_index, day in enumerate(all_days):
            if day['isRestDay']:
                for r in resources:
                    model.Add(on_day_vars[(r['id'], day_index)] == 0)
            else:
                daily_work = sum(on_day_vars[(r['id'], day_index)] * r['durationMinutes'] for r in resources)
                model.Add(daily_work <= day['targetMinutes'])

        print(f"[{run_id}] Model created. Starting solver...")
        
        solver = cp_model.CpSolver()
        solver.parameters.max_time_in_seconds = 840.0
        status = solver.Solve(model)

        if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
            print(f"[{run_id}] Solution found. Processing results...")
            schedule_slots = []
            for day_index, day in enumerate(all_days):
                start_minute = 0
                day_tasks = [r for r in resources if solver.Value(on_day_vars[(r['id'], day_index)]['endPage'])]
                
                day_tasks.sort(key=lambda r: r.get('sequenceOrder', 9999))

                for r in day_tasks:
                    end_minute = start_minute + r['durationMinutes']
                    slot = {
                        "run_id": run_id, "resource_id": r['id'], "date": day['date'],
                        "start_minute": start_minute, "end_minute": end_minute,
                        "title": r['title'], "domain": r['domain'], "type": r['type']
                    }
                    schedule_slots.append(slot)
                    start_minute = end_minute
            
            print(f"[{run_id}] Inserting {len(schedule_slots)} slots.")
            supabase.from_("schedule_slots").insert(schedule_slots).execute()
            supabase.from_("runs").update({"status": "COMPLETE"}).eq("id", run_id).execute()
            print(f"[{run_id}] Run complete.")
        else:
            raise Exception("Solver could not find a feasible solution. Check constraints.")

    except Exception as e:
        error_trace = traceback.format_exc()
        error_message = f"Error in solver thread for run {run_id}: {e}\n{error_trace}"
        print(error_message)
        try:
            supabase.from_("runs").update({"status": "FAILED", "error_text": error_message}).eq("id", run_id).execute()
        except Exception as db_e:
            print(f"[{run_id}] CRITICAL: Failed to write error status to DB: {db_e}")

@app.route("/internal/run-solver", methods=["POST"])
def run_solver_endpoint():
    auth_header = request.headers.get('Authorization')
    expected_token = f"Bearer {INTERNAL_API_TOKEN}"
    if not auth_header or auth_header != expected_token:
        return jsonify({"error": "Unauthorized"}), 401
        
    data = request.get_json()
    run_id = data.get("run_id")
    if not run_id:
        return jsonify({"error": "run_id is required"}), 400

    try:
        print(f"[{run_id}] Received task. Fetching data.")
        run_data = supabase.from_("runs").select("start_date, end_date").eq("id", run_id).single().execute().data
        if not run_data:
            raise Exception(f"Run ID {run_id} not found.")

        resources_response = supabase.from_("resources").select("*").eq("isArchived", False).execute()
        resources = resources_response.data or []
        
        exceptions_data = []
        user_data_response = supabase.from_("user_data").select("data").eq("id", 1).maybe_single().execute()
        if user_data_response.data and 'data' in user_data_response.data and 'exceptionDates' in user_data_response.data['data']:
            exceptions_data = user_data_response.data['data']['exceptionDates']
        
        print(f"[{run_id}] Data fetch complete. Starting solver thread.")
        
        solver_thread = threading.Thread(
            target=solve_schedule,
            args=(run_id, run_data['start_date'], run_data['end_date'], resources, exceptions_data)
        )
        solver_thread.start()

        return jsonify({"message": f"Solver thread started for run_id: {run_id}"}), 200

    except Exception as e:
        error_trace = traceback.format_exc()
        error_message = f"Failed to prepare solver: {e}\n{error_trace}"
        print(error_message)
        supabase.from_("runs").update({"status": "FAILED", "error_text": error_message}).eq("id", run_id).execute()
        return jsonify({"error": error_message}), 500

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
