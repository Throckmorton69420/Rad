import os
import traceback
from flask import Flask, request, jsonify
from supabase import create_client, Client
from ortools.sat.python import cp_model
from datetime import date, timedelta, datetime

# --- Initialization ---
app = Flask(__name__)

supabase_url = os.environ.get("SUPABASE_URL")
supabase_key = os.environ.get("SUPABASE_KEY")
solver_token = os.environ.get("INTERNAL_API_TOKEN")

if not all([supabase_url, supabase_key, solver_token]):
    raise ValueError("FATAL: Missing required environment variables SUPABASE_URL, SUPABASE_KEY, or INTERNAL_API_TOKEN.")

supabase: Client = create_client(supabase_url, supabase_key)

# --- Synchronous Solver Logic ---
def solve_schedule(run_id: str):
    """
    This function contains the long-running solver logic. It now runs synchronously
    within the request handler, as it's triggered by Cloud Tasks which can handle long waits.
    """
    try:
        app.logger.info(f"[{run_id}] Solver task started. Updating status to SOLVING.")
        supabase.table("runs").update({"status": "SOLVING"}).eq("id", run_id).execute()

        # 1. Fetch all necessary data from Supabase
        run_data_req = supabase.table("runs").select("start_date, end_date").eq("id", run_id).single().execute()
        if not run_data_req.data:
            raise Exception(f"Run ID {run_id} not found.")
        run_data = run_data_req.data
        app.logger.info(f"[{run_id}] Fetched run data.")
        
        resources_response = supabase.table("resources").select("*").eq("isArchived", False).execute()
        all_resources = resources_response.data or []
        app.logger.info(f"[{run_id}] Fetched {len(all_resources)} resources.")
        
        user_data_response = supabase.table("user_data").select("data").eq("id", 1).maybe_single().execute()
        all_exception_rules = []
        if user_data_response.data and 'data' in user_data_response.data and user_data_response.data['data'] and 'exceptionDates' in user_data_response.data['data']:
             all_exception_rules = user_data_response.data['data']['exceptionDates']
        app.logger.info(f"[{run_id}] Fetched {len(all_exception_rules)} exception rules.")

        # --- CP-SAT MODEL CONSTRUCTION ---
        model = cp_model.CpModel()
        
        start_date = datetime.fromisoformat(run_data['start_date']).date()
        end_date = datetime.fromisoformat(run_data['end_date']).date()
        num_days = (end_date - start_date).days + 1
        all_dates = [start_date + timedelta(days=i) for i in range(num_days)]

        tasks = {}
        resource_map = {res['id']: res for res in all_resources}

        app.logger.info(f"[{run_id}] Building model variables...")
        for res in all_resources:
            task_days = [model.NewBoolVar(f"on_day_{res['id']}_{d}") for d in range(num_days)]
            tasks[res['id']] = { 'days': task_days, 'duration': res['durationMinutes'], 'resource': res }
            if res.get('isPrimaryMaterial'):
                model.AddAtMostOne(task_days)

        # 2. Add Constraints
        app.logger.info(f"[{run_id}] Adding constraints...")
        for d_idx, d_val in enumerate(all_dates):
            date_str = d_val.isoformat()
            exception = next((rule for rule in all_exception_rules if rule['date'] == date_str), None)
            
            daily_budget = DEFAULT_DAILY_STUDY_MINS
            is_rest_day = False
            
            if exception:
                is_rest_day = exception.get('isRestDayOverride', False)
                daily_budget = exception.get('targetMinutes', 0 if is_rest_day else daily_budget)
            
            if is_rest_day:
                 for res_id in tasks:
                    model.Add(tasks[res_id]['days'][d_idx] == 0)
            else:
                daily_duration = sum(tasks[res_id]['duration'] * tasks[res_id]['days'][d_idx] for res_id in tasks)
                model.Add(daily_duration <= daily_budget)

        # --- SOLVER EXECUTION ---
        app.logger.info(f"[{run_id}] Starting solver...")
        solver = cp_model.CpSatSolver()
        solver.parameters.max_time_in_seconds = 840.0 # Just under the 15 min timeout
        solver.parameters.num_search_workers = 8
        status = solver.Solve(model)
        
        # --- PROCESS AND SAVE RESULTS ---
        app.logger.info(f"[{run_id}] Solver finished with status: {solver.StatusName(status)}")
        if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
            schedule_slots = []
            
            for d, current_date in enumerate(all_dates):
                tasks_for_day_ids = [res_id for res_id, task_vars in tasks.items() if solver.Value(task_vars['days'][d])]
                if not tasks_for_day_ids:
                    continue
                tasks_for_day = [resource_map[res_id] for res_id in tasks_for_day_ids]
                tasks_for_day.sort(key=lambda r: (r.get('sequenceOrder', 99999), r['title']))

                current_minute = 0
                for resource in tasks_for_day:
                    start_minute = current_minute
                    end_minute = current_minute + resource['durationMinutes']
                    schedule_slots.append({
                        "run_id": run_id, "resource_id": resource['id'], "date": str(current_date),
                        "start_minute": start_minute, "end_minute": end_minute,
                        "title": resource['title'], "domain": resource['domain'], "type": resource['type']
                    })
                    current_minute = end_minute
            
            app.logger.info(f"[{run_id}] Generated {len(schedule_slots)} slots. Inserting into database...")
            if schedule_slots:
                supabase.table("schedule_slots").delete().eq('run_id', run_id).execute()
                supabase.table("schedule_slots").insert(schedule_slots).execute()
            
            supabase.table("runs").update({"status": "COMPLETE"}).eq("id", run_id).execute()
            app.logger.info(f"[{run_id}] Run marked as COMPLETE.")
        else:
            raise Exception(f"Solver failed with status: {solver.StatusName(status)}. Could not find a feasible solution.")

    except Exception as e:
        error_trace = traceback.format_exc()
        error_message = f"Error in solver for run {run_id}: {str(e)}\n\nTraceback:\n{error_trace}"
        app.logger.error(error_message)
        try:
            supabase.table("runs").update({"status": "FAILED", "error_text": error_message}).eq("id", run_id).execute()
        except Exception as db_e:
            app.logger.error(f"[{run_id}] CRITICAL: Failed to write error status to DB after solver failure: {db_e}")
        # Re-raise the exception to ensure the Cloud Task invocation fails and can be retried.
        raise e


# --- API Endpoints ---
@app.route("/internal/run-solver", methods=["POST"])
def run_solver_endpoint():
    # 1. Authorization
    auth_header = request.headers.get('Authorization')
    if not auth_header or auth_header != f"Bearer {solver_token}":
        return jsonify({"error": "Unauthorized"}), 401
        
    data = request.get_json()
    run_id = data.get("run_id")
    if not run_id:
        return jsonify({"error": "run_id is required"}), 400

    try:
        app.logger.info(f"[{run_id}] Received task via Cloud Tasks. Running solver synchronously.")
        # Call the solver function directly. No threading.
        solve_schedule(run_id)
        
        # If solve_schedule completes without error, return 200 OK.
        return jsonify({"message": f"Solver completed successfully for run_id: {run_id}"}), 200

    except Exception as e:
        # The error is already logged and saved to Supabase inside solve_schedule.
        # We return a 500 error here to signal to Cloud Tasks that the task invocation
        # failed, so it can handle retries if configured.
        return jsonify({"error": f"Solver failed for run {run_id}: {str(e)}"}), 500

@app.route("/", methods=["GET"])
def health_check():
    return "Radiology Solver Service is running."

if __name__ == "__main__":
    app.run(debug=False, host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
